// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String?
  theme    String  @default("dark")
  isAdmin  Boolean @default(false)

  Map           Map[]
  MapLike       MapLike[]
  StepCompleted StepCompleted[]
}

model Map {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  published   Boolean   @default(false)
  MapLike     MapLike[]

  ownerId       Int
  owner         User            @relation(fields: [ownerId], references: [id])
  MapData       MapData?
  Step          Step[]
  StepCompleted StepCompleted[]
}

model MapLike {
  id Int @id @default(autoincrement())

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  mapId   Int
  map     Map  @relation(fields: [mapId], references: [id], onDelete: Cascade)
}

model MapData {
  id   Int  @id @default(autoincrement())
  data Json

  map   Map? @relation(fields: [mapId], references: [id], onDelete: Cascade)
  mapId Int  @unique
}

model Step {
  id   String @id
  text String

  mapId         Int
  map           Map?           @relation(fields: [mapId], references: [id], onDelete: Cascade)
  StepCompleted StepCompleted[]
}


model StepCompleted {
  id          Int     @id @default(autoincrement())
  isCompleted Boolean @default(false)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  mapId Int
  map   Map? @relation(fields: [mapId], references: [id], onDelete: Cascade)

  step   Step?  @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId String

  @@unique([ownerId, stepId])
}
